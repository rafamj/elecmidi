#selects pattern 1 (The pattern is only modified in memory. In order to save it permanently is necessary to pulse the "write" button)
goto 1
#reads the pattern from the electribe
read

name Test
length 4

#parts. The first parameter indicates the part(s)
lastStep 1-4 16

#voiceAssign possible values: Mono1, Mono2, Poly1, Poly2  or 0,1,2,3
voiceAssign 1 Mono1
#sets the gate time of all steps in part 1
gateTime 1 70

#sets the gate time for the steps 7,9,10 
gateTime 1 @7,9-10 17
gateTime 1 @15 80 

velocity 1 90
velocity 1 @1,5,9,13 120

#triggers for part 1 o=on x=off _=tie (gateTime==127) X=xxxx
steps 1   o_xo oxox oxox oxox   X oooo X  oooo
#start at step 29
#it is possible to multiply: oooo * 2  == oooo oooo
steps 1 @29 oooo * 2
# ((xo_xo  *2) xoxo ) *2   == xo_xo xo_xo xoxo xo_xo xo_xo xoxo
steps 1 @33  ((xo_xo  *2) xoxo ) *2 o * 8 

#notes for part 1:
#A5=A, octave 5. 
#g is tied with A5 (see triggers above). g=G
#C^=C, one octave up. 
#Cv=C, one octave down. 
#D+= D sharp (- = flat)
notes 1     A1 A1 . B    C^ . D .   D+ . Cv .   B . A .  . . . . C^ d e f  . . . . c d e f
notes 1 @33      (((. C4 C . D) * 2) (. D+ . Cv) *2) *2  ( B A C^ d ) *8 
#notes+ sets  steps, stepsTrigger and notes at the same time:
#notes+ 1  C4___ . is equivalent to steps 1 o___x and notes 1 C4 C C C .
notes+ 1     A1_ . B    C^ . D .   D+ . Cv .   B . A .  . . . . C^ d e f  . . . . c d e f
notes+ 1 @33      (((. C4_  . D) * 2) (. D+ . Cv) *2) *2  ( B A C^ d ) *8 
#transpose 1 @1-6 -3



gateTime 2-3 90
velocity 2-3 80

triggers 2-3 o___ X o___ X         X X oooo  oooo 

#d3af^, e3bg^ are chords ; it is also possible a.b (the second note is 0)
# notes can also be multiplied 
notes 2-3 d3af^  * 3  . . . .    e3bg^   * 3   . . . .  . . . .   
#@25 -> start inserting at step 25 
# =o7 is equivalent to = = =   = = = =
notes 2-3 @25 g4a^b *7

transpose 2     1

gateTime 4 90
velocity 4 80
triggers 4      ____ ____ ____ ____ 
triggers 4 @17 ____ ____ ____ ____ 
triggers 4  @33 ____ ____ ____ ____ 
triggers 4  @49 ____ ____ ____ ____ 

notes 4       d2f^ *16     e2g^ *16
notes 4 @33   d2f^  *15     e2g^ *15
#prints the data to stdout
#prints parts 1-4:
#print 1-4
#prints all:
#print

#poke command writes a value in an address
#the type parameter can be the type of the value (u=byte, d=2 byte integer, c=character)
#poke <addr> [part] [type[number of values]] <value>
#change scale
poke 40 0 # equivalent to poke 20 u1 0 # equivalent to poke 20 u1 0
#change osc type in part 3 to 21=PureEight
poke p3 8 d 20  

#peek [part] <address> [type[number of values]]
#prints the 10 first values in part 3 
peek p3 0 u10

#motion sequence. parameters slot (0-23) part(1-16) destination(0-19) sequence (64 values from 0 to 127))
#the values can have the form <position>:<value>
#for example the following line changes the pan continously from 0 at position 0 to 127 at position 30, in positions 31 and 32 puts the value 127 and from positions 33 to 64 goes back to 0
#Can write 12 instead of "Amp Pan" 
motion 0 1 "Amp Pan"       0:0 30:127 127 127 63:0

#writes back the modified pattern into the electribe
write



################################################################

#performance commands:

#mutes all parts except 1
mute 2-16 On
mute 1 Off
write

start

#waits 15 steps (until the end of the pattern, step 16)
wait 0.15 

#unmutes part 2
mute 2 Off
write

#waits 1 cycle (length o last step of part 0)
wait 1 
mute 3 Off
#transpose 1-4 6
write

#waits 1 cycle + 15 steps
wait 1.15 

stop
